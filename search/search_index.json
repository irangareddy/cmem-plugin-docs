{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cmem-plugin-docs This eccenca Corporate Memory plugin totally rocks with all new docs support Badges Author Details Ranga Reddy Nukala rangareddy.nukala@eccenca.com","title":"Home"},{"location":"getting-started/","text":"cmem-plugin-docs This eccenca Corporate Memory plugin totally rocks with all new docs support Installation Using pip pip install cmem-plugin-docs Using poetry poetry add cmem-plugin-docs","title":"Getting Started"},{"location":"about/changelog/","text":"Change Log \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning [Unreleased] \u00a4 Added \u00a4 initial version","title":"Changelog"},{"location":"about/changelog/#change-log","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning","title":"Change Log"},{"location":"about/changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"about/changelog/#added","text":"initial version","title":"Added"},{"location":"about/contributing/","text":"Contribution Guide \u00a4 These documents reflect contribution rules: Keep A Changelog's Format Semantic Versioning","title":"Contributing"},{"location":"about/contributing/#contribution-guide","text":"These documents reflect contribution rules: Keep A Changelog's Format Semantic Versioning","title":"Contribution Guide"},{"location":"how-to-guides/","text":"","title":"How-To Guides"},{"location":"how-to-guides/SUMMARY/","text":"test_docs utils","title":"SUMMARY"},{"location":"how-to-guides/test_docs/","text":"Plugin tests. setup ( request ) \u00a4 Provides the DI build project incl. assets. Source code in tests/test_docs.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @pytest . fixture def setup ( request ): \"\"\"Provides the DI build project incl. assets.\"\"\" make_new_project ( PROJECT_NAME ) make_new_dataset ( project_name = PROJECT_NAME , dataset_name = DATASET_NAME , dataset_type = DATASET_TYPE , parameters = { \"file\" : RESOURCE_NAME }, autoconfigure = False , ) with io . StringIO ( \"docs plugin sample file.\" ) as response_file : create_resource ( project_name = PROJECT_NAME , resource_name = RESOURCE_NAME , file_resource = response_file , replace = True , ) request . addfinalizer ( lambda : delete_project ( PROJECT_NAME )) test_integration_placeholder ( setup ) \u00a4 Placeholder to write integration testcase with cmem Source code in tests/test_docs.py 71 72 73 74 75 @needs_cmem def test_integration_placeholder ( setup ): \"\"\"Placeholder to write integration testcase with cmem\"\"\" with get_resource_response ( PROJECT_NAME , RESOURCE_NAME ) as response : assert response . text != \"\" test_transform_execution_with_inputs () \u00a4 Test Lifetime with sequence of inputs. Source code in tests/test_docs.py 63 64 65 66 67 68 def test_transform_execution_with_inputs (): \"\"\"Test Lifetime with sequence of inputs.\"\"\" result = Lifetime ( start_date = \"\" ) . transform ( inputs = [[ \"2000-05-22\" , \"2021-12-12\" , \"1904-02-29\" ]] ) assert result == [ \"22\" , \"0\" , \"118\" ] test_transform_execution_with_optional_input () \u00a4 Test Lifetime with optional input Source code in tests/test_docs.py 56 57 58 59 60 def test_transform_execution_with_optional_input (): \"\"\"Test Lifetime with optional input\"\"\" result = Lifetime ( start_date = \"2000-05-22\" ) . transform ( inputs = []) for item in result : assert item == \"22\" test_workflow_execution () \u00a4 Test plugin execution Source code in tests/test_docs.py 45 46 47 48 49 50 51 52 53 def test_workflow_execution (): \"\"\"Test plugin execution\"\"\" entities = 100 values = 10 plugin = DollyPlugin ( number_of_entities = entities , number_of_values = values ) result = plugin . execute ( inputs = (), context = TestExecutionContext ()) for item in result . entities : assert len ( item . values ) == len ( result . schema . paths )","title":"Test docs"},{"location":"how-to-guides/test_docs/#tests.test_docs.setup","text":"Provides the DI build project incl. assets. Source code in tests/test_docs.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @pytest . fixture def setup ( request ): \"\"\"Provides the DI build project incl. assets.\"\"\" make_new_project ( PROJECT_NAME ) make_new_dataset ( project_name = PROJECT_NAME , dataset_name = DATASET_NAME , dataset_type = DATASET_TYPE , parameters = { \"file\" : RESOURCE_NAME }, autoconfigure = False , ) with io . StringIO ( \"docs plugin sample file.\" ) as response_file : create_resource ( project_name = PROJECT_NAME , resource_name = RESOURCE_NAME , file_resource = response_file , replace = True , ) request . addfinalizer ( lambda : delete_project ( PROJECT_NAME ))","title":"setup()"},{"location":"how-to-guides/test_docs/#tests.test_docs.test_integration_placeholder","text":"Placeholder to write integration testcase with cmem Source code in tests/test_docs.py 71 72 73 74 75 @needs_cmem def test_integration_placeholder ( setup ): \"\"\"Placeholder to write integration testcase with cmem\"\"\" with get_resource_response ( PROJECT_NAME , RESOURCE_NAME ) as response : assert response . text != \"\"","title":"test_integration_placeholder()"},{"location":"how-to-guides/test_docs/#tests.test_docs.test_transform_execution_with_inputs","text":"Test Lifetime with sequence of inputs. Source code in tests/test_docs.py 63 64 65 66 67 68 def test_transform_execution_with_inputs (): \"\"\"Test Lifetime with sequence of inputs.\"\"\" result = Lifetime ( start_date = \"\" ) . transform ( inputs = [[ \"2000-05-22\" , \"2021-12-12\" , \"1904-02-29\" ]] ) assert result == [ \"22\" , \"0\" , \"118\" ]","title":"test_transform_execution_with_inputs()"},{"location":"how-to-guides/test_docs/#tests.test_docs.test_transform_execution_with_optional_input","text":"Test Lifetime with optional input Source code in tests/test_docs.py 56 57 58 59 60 def test_transform_execution_with_optional_input (): \"\"\"Test Lifetime with optional input\"\"\" result = Lifetime ( start_date = \"2000-05-22\" ) . transform ( inputs = []) for item in result : assert item == \"22\"","title":"test_transform_execution_with_optional_input()"},{"location":"how-to-guides/test_docs/#tests.test_docs.test_workflow_execution","text":"Test plugin execution Source code in tests/test_docs.py 45 46 47 48 49 50 51 52 53 def test_workflow_execution (): \"\"\"Test plugin execution\"\"\" entities = 100 values = 10 plugin = DollyPlugin ( number_of_entities = entities , number_of_values = values ) result = plugin . execute ( inputs = (), context = TestExecutionContext ()) for item in result . entities : assert len ( item . values ) == len ( result . schema . paths )","title":"test_workflow_execution()"},{"location":"how-to-guides/utils/","text":"Testing utilities. TestExecutionContext \u00a4 Bases: ExecutionContext dummy execution context that can be used in tests Source code in tests/utils.py 57 58 59 60 61 62 63 64 65 66 67 68 69 class TestExecutionContext ( ExecutionContext ): \"\"\"dummy execution context that can be used in tests\"\"\" __test__ = False def __init__ ( self , project_id : str = \"dummyProject\" , user : Optional [ UserContext ] = TestUserContext (), ): self . report = ReportContext () self . task = TestTaskContext ( project_id = project_id ) self . user = user TestPluginContext \u00a4 Bases: PluginContext dummy plugin context that can be used in tests Source code in tests/utils.py 34 35 36 37 38 39 40 41 42 43 44 45 class TestPluginContext ( PluginContext ): \"\"\"dummy plugin context that can be used in tests\"\"\" __test__ = False def __init__ ( self , project_id : str = \"dummyProject\" , user : Optional [ UserContext ] = TestUserContext (), ): self . project_id = project_id self . user = user TestTaskContext \u00a4 Bases: TaskContext dummy Task context that can be used in tests Source code in tests/utils.py 48 49 50 51 52 53 54 class TestTaskContext ( TaskContext ): \"\"\"dummy Task context that can be used in tests\"\"\" __test__ = False def __init__ ( self , project_id : str = \"dummyProject\" ): self . project_id = lambda : project_id TestUserContext \u00a4 Bases: UserContext dummy user context that can be used in tests Source code in tests/utils.py 25 26 27 28 29 30 31 class TestUserContext ( UserContext ): \"\"\"dummy user context that can be used in tests\"\"\" __test__ = False def token ( self ) -> str : return get_token ()[ \"access_token\" ]","title":"Utils"},{"location":"how-to-guides/utils/#tests.utils.TestExecutionContext","text":"Bases: ExecutionContext dummy execution context that can be used in tests Source code in tests/utils.py 57 58 59 60 61 62 63 64 65 66 67 68 69 class TestExecutionContext ( ExecutionContext ): \"\"\"dummy execution context that can be used in tests\"\"\" __test__ = False def __init__ ( self , project_id : str = \"dummyProject\" , user : Optional [ UserContext ] = TestUserContext (), ): self . report = ReportContext () self . task = TestTaskContext ( project_id = project_id ) self . user = user","title":"TestExecutionContext"},{"location":"how-to-guides/utils/#tests.utils.TestPluginContext","text":"Bases: PluginContext dummy plugin context that can be used in tests Source code in tests/utils.py 34 35 36 37 38 39 40 41 42 43 44 45 class TestPluginContext ( PluginContext ): \"\"\"dummy plugin context that can be used in tests\"\"\" __test__ = False def __init__ ( self , project_id : str = \"dummyProject\" , user : Optional [ UserContext ] = TestUserContext (), ): self . project_id = project_id self . user = user","title":"TestPluginContext"},{"location":"how-to-guides/utils/#tests.utils.TestTaskContext","text":"Bases: TaskContext dummy Task context that can be used in tests Source code in tests/utils.py 48 49 50 51 52 53 54 class TestTaskContext ( TaskContext ): \"\"\"dummy Task context that can be used in tests\"\"\" __test__ = False def __init__ ( self , project_id : str = \"dummyProject\" ): self . project_id = lambda : project_id","title":"TestTaskContext"},{"location":"how-to-guides/utils/#tests.utils.TestUserContext","text":"Bases: UserContext dummy user context that can be used in tests Source code in tests/utils.py 25 26 27 28 29 30 31 class TestUserContext ( UserContext ): \"\"\"dummy user context that can be used in tests\"\"\" __test__ = False def token ( self ) -> str : return get_token ()[ \"access_token\" ]","title":"TestUserContext"},{"location":"reference/","text":"","title":"Code Reference"},{"location":"reference/SUMMARY/","text":"transform workflow","title":"SUMMARY"},{"location":"reference/transform/","text":"lifetime(age) transform plugin module Lifetime \u00a4 Bases: TransformPlugin Lifetime Transform Plugin Source code in cmem_plugin_docs/transform/__init__.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @Plugin ( label = \"Lifetime (age - docs)\" , plugin_id = \"Example-Lifetime-docs\" , description = \"From the input date,\" \"the value gets transformed into number of years (age).\" \" Supports only xsd:date(YYYY-MM-DD) format.\" , documentation = \"\"\" This example transform operator returns lifetime(age). From the input date, the value gets transformed into number of years(age). Input Date: 2000-05-22 Current Date: 2022-08-19 Transformed Output: 22 The parameter can be specified: - 'date': specify a date in xsd:date(yyyy-MM-dd) format \"\"\" , parameters = [ PluginParameter ( name = \"start_date\" , label = \"Date\" , description = \"specify a date to know its lifetime(age).\" , default_value = None , ), ], ) class Lifetime ( TransformPlugin ): \"\"\"Lifetime Transform Plugin\"\"\" DATE_FORMAT = \"%Y-%m- %d \" def __init__ ( self , start_date : str ): self . start_date = start_date def transform ( self , inputs : Sequence [ Sequence [ str ]]) -> Sequence [ str ]: result = [] if len ( inputs ) != 0 : for collection in inputs : result += [ f \" { self . _calculate_age ( _ ) } \" for _ in collection ] if len ( result ) == 0 and len ( self . start_date ) > 0 : result += [ f \" { self . _calculate_age ( self . start_date ) } \" ] return result def _calculate_age ( self , value : str ) -> int : \"\"\"calculate age in years\"\"\" today = date . today () born = datetime . datetime . strptime ( value , self . DATE_FORMAT ) . date () try : birthday = born . replace ( year = today . year ) # raised when birthdate is February 29 # and the current year is not a leap year except ValueError : birthday = born . replace ( year = today . year , month = born . month + 1 , day = 1 ) if birthday > today : return today . year - born . year - 1 return today . year - born . year","title":"Transform"},{"location":"reference/transform/#cmem_plugin_docs.transform.Lifetime","text":"Bases: TransformPlugin Lifetime Transform Plugin Source code in cmem_plugin_docs/transform/__init__.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @Plugin ( label = \"Lifetime (age - docs)\" , plugin_id = \"Example-Lifetime-docs\" , description = \"From the input date,\" \"the value gets transformed into number of years (age).\" \" Supports only xsd:date(YYYY-MM-DD) format.\" , documentation = \"\"\" This example transform operator returns lifetime(age). From the input date, the value gets transformed into number of years(age). Input Date: 2000-05-22 Current Date: 2022-08-19 Transformed Output: 22 The parameter can be specified: - 'date': specify a date in xsd:date(yyyy-MM-dd) format \"\"\" , parameters = [ PluginParameter ( name = \"start_date\" , label = \"Date\" , description = \"specify a date to know its lifetime(age).\" , default_value = None , ), ], ) class Lifetime ( TransformPlugin ): \"\"\"Lifetime Transform Plugin\"\"\" DATE_FORMAT = \"%Y-%m- %d \" def __init__ ( self , start_date : str ): self . start_date = start_date def transform ( self , inputs : Sequence [ Sequence [ str ]]) -> Sequence [ str ]: result = [] if len ( inputs ) != 0 : for collection in inputs : result += [ f \" { self . _calculate_age ( _ ) } \" for _ in collection ] if len ( result ) == 0 and len ( self . start_date ) > 0 : result += [ f \" { self . _calculate_age ( self . start_date ) } \" ] return result def _calculate_age ( self , value : str ) -> int : \"\"\"calculate age in years\"\"\" today = date . today () born = datetime . datetime . strptime ( value , self . DATE_FORMAT ) . date () try : birthday = born . replace ( year = today . year ) # raised when birthdate is February 29 # and the current year is not a leap year except ValueError : birthday = born . replace ( year = today . year , month = born . month + 1 , day = 1 ) if birthday > today : return today . year - born . year - 1 return today . year - born . year","title":"Lifetime"},{"location":"reference/workflow/","text":"Random values workflow plugin module DollyPlugin \u00a4 Bases: WorkflowPlugin Example Workflow Plugin: Random Values Source code in cmem_plugin_docs/workflow/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 @Plugin ( label = \"Random Values (docs)\" , description = \"Generates random values of X rows a Y values.\" , documentation = \"\"\" This example workflow operator generates random values. The values are generated in X rows a Y values. Both parameter can be specified: - 'number_of_entities': How many rows do you need. - 'number_of_values': How many values per row do you need. \"\"\" , parameters = [ PluginParameter ( name = \"number_of_entities\" , label = \"Entities (Rows)\" , description = \"How many rows will be created per run.\" , default_value = \"10\" , ), PluginParameter ( name = \"number_of_values\" , label = \"Values (Columns)\" , description = \"How many values are created per entity / row.\" , default_value = \"5\" , ), ], ) class DollyPlugin ( WorkflowPlugin ): \"\"\"Example Workflow Plugin: Random Values\"\"\" def __init__ ( self , number_of_entities : int = 10 , number_of_values : int = 5 ) -> None : if number_of_entities < 1 : raise ValueError ( \"Entities (Rows) needs to be a positive integer.\" ) if number_of_values < 1 : raise ValueError ( \"Values (Columns) needs to be a positive integer.\" ) self . number_of_entities = number_of_entities self . number_of_values = number_of_values def execute ( self , inputs : Sequence [ Entities ], context : ExecutionContext ) -> Entities : self . log . info ( \"Start creating random values.\" ) self . log . info ( f \"Config length: { len ( self . config . get ()) } \" ) value_counter = 0 entities = [] for _ in range ( self . number_of_entities ): entity_uri = f \"urn:uuid: { str ( uuid . uuid4 ()) } \" values = [] for _ in range ( self . number_of_values ): values . append ([ token_urlsafe ( 16 )]) value_counter += 1 context . report . update ( ExecutionReport ( entity_count = value_counter , operation = \"wait\" , operation_desc = \"random values generated\" , ) ) entities . append ( Entity ( uri = entity_uri , values = values )) paths = [] for path_no in range ( self . number_of_values ): path_uri = f \"https://example.org/vocab/RandomValuePath/ { path_no } \" paths . append ( EntityPath ( path = path_uri )) schema = EntitySchema ( type_uri = \"https://example.org/vocab/RandomValueRow\" , paths = paths , ) self . log . info ( f \"Happy to serve { value_counter } random values.\" ) return Entities ( entities = entities , schema = schema )","title":"Workflow"},{"location":"reference/workflow/#cmem_plugin_docs.workflow.DollyPlugin","text":"Bases: WorkflowPlugin Example Workflow Plugin: Random Values Source code in cmem_plugin_docs/workflow/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 @Plugin ( label = \"Random Values (docs)\" , description = \"Generates random values of X rows a Y values.\" , documentation = \"\"\" This example workflow operator generates random values. The values are generated in X rows a Y values. Both parameter can be specified: - 'number_of_entities': How many rows do you need. - 'number_of_values': How many values per row do you need. \"\"\" , parameters = [ PluginParameter ( name = \"number_of_entities\" , label = \"Entities (Rows)\" , description = \"How many rows will be created per run.\" , default_value = \"10\" , ), PluginParameter ( name = \"number_of_values\" , label = \"Values (Columns)\" , description = \"How many values are created per entity / row.\" , default_value = \"5\" , ), ], ) class DollyPlugin ( WorkflowPlugin ): \"\"\"Example Workflow Plugin: Random Values\"\"\" def __init__ ( self , number_of_entities : int = 10 , number_of_values : int = 5 ) -> None : if number_of_entities < 1 : raise ValueError ( \"Entities (Rows) needs to be a positive integer.\" ) if number_of_values < 1 : raise ValueError ( \"Values (Columns) needs to be a positive integer.\" ) self . number_of_entities = number_of_entities self . number_of_values = number_of_values def execute ( self , inputs : Sequence [ Entities ], context : ExecutionContext ) -> Entities : self . log . info ( \"Start creating random values.\" ) self . log . info ( f \"Config length: { len ( self . config . get ()) } \" ) value_counter = 0 entities = [] for _ in range ( self . number_of_entities ): entity_uri = f \"urn:uuid: { str ( uuid . uuid4 ()) } \" values = [] for _ in range ( self . number_of_values ): values . append ([ token_urlsafe ( 16 )]) value_counter += 1 context . report . update ( ExecutionReport ( entity_count = value_counter , operation = \"wait\" , operation_desc = \"random values generated\" , ) ) entities . append ( Entity ( uri = entity_uri , values = values )) paths = [] for path_no in range ( self . number_of_values ): path_uri = f \"https://example.org/vocab/RandomValuePath/ { path_no } \" paths . append ( EntityPath ( path = path_uri )) schema = EntitySchema ( type_uri = \"https://example.org/vocab/RandomValueRow\" , paths = paths , ) self . log . info ( f \"Happy to serve { value_counter } random values.\" ) return Entities ( entities = entities , schema = schema )","title":"DollyPlugin"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}